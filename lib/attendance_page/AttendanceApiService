import 'dart:convert';
import 'package:intl/intl.dart';
import 'package:kliktoko/attendance_page/AttendanceModel.dart';
import 'package:kliktoko/storage/storage_service.dart';
import 'package:http/http.dart' as http;

class AttendanceApiService {
  static const String baseUrl = 'https://kliktoko.rplrus.com';
  
  final http.Client _client = http.Client();
  final StorageService _storageService = StorageService();

  // Check attendance status from server
  Future<AttendanceModel> checkAttendanceStatus() async {
    try {
      // Get token first
      final token = await _storageService.getToken();
      if (token == null) {
        throw Exception('No authentication token available. Please login first.');
      }
      
      // Get current date in API expected format
      final today = DateTime.now();
      final todayStr = DateFormat('yyyy-MM-dd').format(today);
      
      // First try using direct status endpoint
      try {
        final statusResponse = await _client.get(
          Uri.parse('$baseUrl/api/attendance/status?date=$todayStr'),
          headers: await _getHeaders(token),
        );

        print('Status API response: ${statusResponse.statusCode}, Body: ${statusResponse.body}');
        
        if (statusResponse.statusCode >= 200 && statusResponse.statusCode < 300) {
          final jsonData = json.decode(statusResponse.body);
          
          // Check for different response formats
          bool isCheckedIn = false;
          
          // Parse the response based on different possible formats
          if (jsonData is Map<String, dynamic>) {
            // Direct is_checked_in field
            if (jsonData.containsKey('is_checked_in')) {
              isCheckedIn = jsonData['is_checked_in'] == true;
            }
            // checked_in field
            else if (jsonData.containsKey('checked_in')) {
              isCheckedIn = jsonData['checked_in'] == true;
            }
            // Status field
            else if (jsonData.containsKey('status')) {
              isCheckedIn = jsonData['status'] == 'checked_in' || 
                           jsonData['status'] == true || 
                           jsonData['status'] == 1;
            }
            // Data wrapper
            else if (jsonData.containsKey('data') && jsonData['data'] is Map<String, dynamic>) {
              var data = jsonData['data'];
              isCheckedIn = data['is_checked_in'] == true || 
                           data['checked_in'] == true || 
                           data['status'] == 'checked_in' ||
                           data['status'] == true;
            }
            
            print('Checked in status detected: $isCheckedIn');
            
            // Create model with the check-in status
            return AttendanceModel(
              isCheckedIn: isCheckedIn,
              date: todayStr,
              shiftId: _extractShiftId(jsonData),
              checkInTime: _extractCheckInTime(jsonData),
              username: _extractUsername(jsonData),
            );
          }
        }
      } catch (e) {
        print('Error with status endpoint, trying attendance history: $e');
      }
      
      // If status endpoint fails or returns unexpected data, try getting from history
      print('Attempting to get attendance from history...');
      final historyResponse = await _client.get(
        Uri.parse('$baseUrl/api/attendance/history'),
        headers: await _getHeaders(token),
      );
      
      if (historyResponse.statusCode >= 200 && historyResponse.statusCode < 300) {
        final jsonData = json.decode(historyResponse.body);
        
        List<dynamic> historyItems = [];
        
        // Handle different API response structures
        if (jsonData is List) {
          historyItems = jsonData;
        } else if (jsonData is Map && jsonData.containsKey('data') && jsonData['data'] is List) {
          historyItems = jsonData['data'];
        } else if (jsonData is Map && jsonData.containsKey('history') && jsonData['history'] is List) {
          historyItems = jsonData['history'];
        }
        
        // Find today's attendance record
        for (var item in historyItems) {
          final itemDate = item['date'] ?? item['attendance_date'] ?? item['created_at']?.toString().split(' ')[0] ?? '';
          if (itemDate.toString().contains(todayStr)) {
            print('Found today\'s attendance in history: $item');
            // Create model from history item
            return AttendanceModel.fromJson(item);
          }
        }
      }
      
      // If no data found, assume not checked in
      print('No attendance data found, assuming not checked in');
      return AttendanceModel(
        isCheckedIn: false,
        date: todayStr,
        shiftId: '1',
      );
      
    } catch (e) {
      print('Error in checkAttendanceStatus: $e');
      throw e;
    }
  }
  
  // Check in
  Future<AttendanceModel> checkIn(String shiftId) async {
    try {
      // Get token first
      final token = await _storageService.getToken();
      if (token == null) {
        throw Exception('No authentication token available. Please login first.');
      }
      
      print('Attempting check-in with shift: $shiftId');
      
      final response = await _client.post(
        Uri.parse('$baseUrl/api/attendance/check-in'),
        headers: await _getHeaders(token),
        body: json.encode({
          'shift_id': shiftId,
        }),
      );
      
      print('Check-in API response: ${response.statusCode}, Body: ${response.body}');
      
      if (response.statusCode >= 200 && response.statusCode < 300) {
        // Get the current date in the format used by the API
        final today = DateTime.now();
        final todayStr = DateFormat('yyyy-MM-dd').format(today);
        
        // Try to parse the response
        try {
          final jsonData = json.decode(response.body);
          
          // Create model with successful check-in
          if (jsonData is Map<String, dynamic>) {
            print('Successfully parsed check-in response');
            
            // Try to extract data from response or use defaults
            return AttendanceModel(
              isCheckedIn: true, // Always set to true on successful check-in
              date: todayStr,
              shiftId: shiftId,
              checkInTime: DateFormat('HH:mm:ss').format(DateTime.now()),
              username: await _getUsernameFromStorage(),
            );
          }
        } catch (e) {
          print('Error parsing check-in response: $e');
        }
        
        // If parsing fails but status code is success, return success model
        return AttendanceModel(
          isCheckedIn: true,
          date: todayStr,
          shiftId: shiftId,
          checkInTime: DateFormat('HH:mm:ss').format(DateTime.now()),
          username: await _getUsernameFromStorage(),
        );
      } else {
        print('Check-in failed with status: ${response.statusCode}');
        throw Exception('Check-in failed with status: ${response.statusCode}');
      }
    } catch (e) {
      print('Error in checkIn: $e');
      throw e;
    }
  }
  
  // Helper methods
  Future<Map<String, String>> _getHeaders([String? token]) async {
    final headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    if (token != null) {
      headers['Authorization'] = 'Bearer $token';
    } else {
      // Try to get token from storage if not provided
      final storedToken = await _storageService.getToken();
      if (storedToken != null) {
        headers['Authorization'] = 'Bearer $storedToken';
      }
    }

    return headers;
  }
  
  String _extractShiftId(Map<String, dynamic> jsonData) {
    // Try different possible field names for shift ID
    if (jsonData.containsKey('shift_id')) {
      return jsonData['shift_id'].toString();
    } else if (jsonData.containsKey('shift')) {
      return jsonData['shift'].toString();
    } else if (jsonData.containsKey('data') && jsonData['data'] is Map<String, dynamic>) {
      var data = jsonData['data'];
      if (data.containsKey('shift_id')) {
        return data['shift_id'].toString();
      } else if (data.containsKey('shift')) {
        return data['shift'].toString();
      }
    }
    return '1'; // Default shift ID
  }
  
  String? _extractCheckInTime(Map<String, dynamic> jsonData) {
    // Try different possible field names for check-in time
    if (jsonData.containsKey('check_in_time')) {
      return jsonData['check_in_time'];
    } else if (jsonData.containsKey('check_in')) {
      return jsonData['check_in'];
    } else if (jsonData.containsKey('data') && jsonData['data'] is Map<String, dynamic>) {
      var data = jsonData['data'];
      if (data.containsKey('check_in_time')) {
        return data['check_in_time'];
      } else if (data.containsKey('check_in')) {
        return data['check_in'];
      }
    }
    return null;
  }
  
  String? _extractUsername(Map<String, dynamic> jsonData) {
    // Try different possible field names for username
    if (jsonData.containsKey('username')) {
      return jsonData['username'];
    } else if (jsonData.containsKey('user_name')) {
      return jsonData['user_name'];
    } else if (jsonData.containsKey('name')) {
      return jsonData['name'];
    } else if (jsonData.containsKey('data') && jsonData['data'] is Map<String, dynamic>) {
      var data = jsonData['data'];
      if (data.containsKey('username')) {
        return data['username'];
      } else if (data.containsKey('user_name')) {
        return data['user_name'];
      } else if (data.containsKey('name')) {
        return data['name'];
      }
    }
    return null;
  }
  
  Future<String?> _getUsernameFromStorage() async {
    try {
      final userData = await _storageService.getUserData();
      if (userData != null) {
        return userData['name'] ?? userData['username'] ?? null;
      }
    } catch (e) {
      print('Error getting username from storage: $e');
    }
    return null;
  }
}